List-
 
 It is the child interface of Collection
-> If we want to represent a group of individual objects where duplicates are allowed and 
insertion order is preserved. Then we should go for List.
> We can differentiate duplicate Objects and we can maintain insertion order by means of 
index hence "index plays important role in List" 

List interface defines the following specific methods.

1)boolean add(int index,Object o);
2)boolean addAll(int index,Collection c);
3)Object get(int index);
4)Object remove(int index);
5)Object Set(int index,Object o);//to replace
6)int indexOf(Object o); //Returns index of first occurance of o
7)int lastIndexOf(Object o);
8)ListIterator listIterator();
void retainAll(Collection<?> c)
ArrayList:
-> ArrayList is an implementation class of Collection interface 
->The underlying data structure is resizable (Internally it will use Array to store data)
-> Duplicate Objects are allowed
-> Insertion order is preserved
-> Heterogeneous Objects are allowed
-> Null insertion is possible

ArrayList Constructors:

      1) ArrayList al=new ArrayList(); 
-> It creates an empty ArrayList Object with default initial capacity 10
-> If ArrayList reaches its maximum capacity then a new ArrayList Object will be created with
NewCapacity=(Current Capacity*3/2)+1

     2) ArrayList al=new ArrayList(int initialCapacity);
-> Creates an empty ArrayList Object with the specified initial capacity.

    3) ArrayList al=new ArrayList(Collection c);
-> Creates an equivalent ArrayList Object for the given Collection that is this constructor 
meant for inter conversation between Collection Objects.
-> ArrayList and Vector classes implements RandomAccess interface so that any random 
element we can access with the same speed.
-> RandomAccess interface present in util package and doesn't contain any methods. It is a 
marker interface



                          LinkedList
-> LinkedList is one of the implementation classes of Collection interface
-> The underlying data structure is double LinkedList
-> If our frequent operation is insertion or deletion in the middle then LinkedList is the best 
choice
-> If our frequent operation is retrieval then LinkedList is not best option
-> Duplicate Objects are allowed
-> Insertion order is preserved
-> Heterogeneous Objects are allowed
-> NULL insertion is possible
-> Implements Serializable and Cloneable interfaces but not RandomAccess
Note: Usually we can use linked list to implement Stacks and Queues to provide support for 
this requirement LinkedList class defines the following 6 specific methods.
1) void addFirst(Object o);
2) void addLast(Object o);
3) Object getFirst();
4) Object getLast();
5) Object removeFirst();
6) Object removeLast();
             LinkedList Constructors:
1) LinkedList l=new LinkedList(); 
It creates an empty LinkedList Object.

2) LinkedList l=new LinkedList(Collection c);
To create an equivalent LinkedList Object for the given Collection
